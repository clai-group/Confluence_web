---
title: "EHE Prediction"
author: "Jingya Cheng"
date: "2024-01-09"
categories: [code, analysis, trend]
---

# prediction for Extreme Heat Events

```{r, include=FALSE}
library(readr)
library(viridis)
library(tidyverse)
library(tidyr)
library(sf)
library(gridExtra)
library(RColorBrewer)
library(pscl)
library(reshape2)
library(data.table)
library(broom)
options(scipen=999)
```

### Loading the base spatail data set including Counties and States boundaires

```{r}
source_dir <- "./data/"
states_file_path <- file.path(source_dir,
                              "us49_states_geo_tigris.rds")
states_geo <- readRDS(states_file_path)[[1]]
counties_file_path <- file.path(source_dir,
                                "us49_counties_geo_tigris.rds")
counties_geo <- readRDS(counties_file_path)[[1]]
```

### Loading the aggregate extreme events data set

```{r}
dat_path <- file.path(source_dir,
                      "S190_T002_Counties_compiled_admin_geo_ehe_ece_sf_2008_2022.rds")
file_size <- file.info(dat_path)$size
dat <- readRDS(dat_path)[[1]]

dat_table = dat %>%  st_drop_geometry()
dat_table = dat_table %>% 
  filter(!(event_type == "Extreme Cold Event" & month_numerical %in% 5:9))
```

### Load prediction dataset

```{r}
pred_ehe_1 =read.csv("~/Desktop/frequency_pred_EHE.csv")
pred_ehe_2 = read.csv("~/Desktop/lstm_pred_freq.csv")
pred_ehe_2$method = "LSTM" 
pred_ehe_1 = pred_ehe_1 %>% dplyr::select(GEOID, years, event_count,LB, UB, RMSE, method) 
colnames(pred_ehe_2) = c("GEOID", "years", "event_count","LB","UB", "RMSE", "method")
pred_ehe = rbind(pred_ehe_1, pred_ehe_2)
pred_ehe$GEOID <- as.character(pred_ehe$GEOID)
pred_ehe$GEOID <- ifelse(nchar(pred_ehe$GEOID) == 4, paste0("0", pred_ehe$GEOID), pred_ehe$GEOID)
head(pred_ehe)
```

```{r}
#pred_ehe_wide = pred_ehe %>%
#  pivot_wider(names_from = years, values_from = c(event_count, LB, UB),
#              names_sep = "_") %>%
#  dplyr::select(GEOID, method, RMSE, event_count_2025, LB_2025, UB_2025, event_count_2035, LB_2035, UB_2035)
#head(pred_ehe_wide)
```


### Model selection

```{r}
## Select the best model using RMSE
best_models_df <- pred_ehe %>%
  group_by(GEOID, years)  %>%
  slice_min(order_by = RMSE, with_ties = FALSE) %>%
  ungroup()

## Convert long to wide
pred_ehe_wide = best_models_df %>%
  pivot_wider(names_from = years, values_from = c(event_count, LB, UB),
              names_sep = "_") 

## Adjusted for area 
#area_dat = counties_geo %>% select(GEOID, total_area_sq_mile) %>% distinct() %>%  st_drop_geometry()
#area_dat$area = area_dat$total_area_sq_mile/2.046
#best_models_df = merge(best_models_df, area_dat, by = "GEOID")
#best_models_df$event_count_2025_per_area = best_models_df$event_count_2025/best_models_df$area
#best_models_df$event_count_2035_per_area = best_models_df$event_count_2035/best_models_df$area
#head(best_models_df)
```

```{r}
hist(pred_ehe_wide$event_count_2025)
table(pred_ehe_wide$method)
```
## Frequency obs vs. pred table
```{r}
pred_15years_avg = best_models_df %>%
  group_by(GEOID) %>%
  summarise(pred_avg_count_per_year = sum(event_count)/15)

obs_15years_avg = dat_table %>% filter(event_type == "Extreme Heat Event") %>%
  group_by(GEOID, NAME, STATE_NAME) %>%
  summarize(event_count = n_distinct(event_date),
            obs_avg_count_per_year = event_count/15)

freq_table = merge(obs_15years_avg, pred_15years_avg, by = "GEOID")
freq_table = freq_table[,-4]
freq_table$diff = freq_table$pred_avg_count_per_year - freq_table$obs_avg_count_per_year
head(freq_table)

freq_table_all_wide = merge(freq_table, pred_ehe_wide, by = "GEOID")
colnames(freq_table_all_wide)
```

#### Map

```{r}
county_boundaris_catalog_frq <- merge(counties_geo,
          freq_table %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# Observation
p_obs_ehe = ggplot() +
  geom_sf(data = county_boundaris_catalog_frq,
            aes(fill = obs_avg_count_per_year), color = NA,
            lwd = .1) + 
  scale_fill_distiller(palette = "PuOr", 
                       limits = c(-30, 30)
                       ) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE average obserbed frequency (2008-2022)") +
  theme_void() + 
  theme(legend.position = "bottom")
p_obs_ehe

# Prediction
p_pred_ehe = ggplot() +
  geom_sf(data = county_boundaris_catalog_frq,
            aes(fill = pred_avg_count_per_year), color = NA,
            lwd = .1) + 
  scale_fill_distiller(palette = "PuOr", 
                       limits = c(-30, 30)
                       ) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE average predicted frequency (2023-2037)") +
  theme_void() + 
  theme(legend.position = "bottom")
p_pred_ehe

# Difference
p_pred_obs_diff_ehe = ggplot() +
  geom_sf(data = county_boundaris_catalog_frq,
            aes(fill = diff), color = NA,
            lwd = .1) + 
  scale_fill_distiller(palette = "PuOr", 
                       limits = c(-30, 30)
                       ) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE frequency differences between predicted and observed counts") +
  theme_void() + 
  theme(legend.position = "bottom")
p_pred_obs_diff_ehe
```


```{r}
best_models_map_dat = best_models_df %>% 
  mutate(avg_counts_2025 = case_when(
    event_count_2025 < 0 ~ 0,
    #event_count_2025_per_area > 15 ~ 15,
    TRUE ~ event_count_2025
  )) %>%
  mutate(avg_counts_2035 = case_when(
    event_count_2035 < 0 ~ 0,
    #event_count_2035_per_area > 15 ~ 15,
    TRUE ~ event_count_2035
  ))

# Merge with geometry data
county_boundaris_catalog_ehe <- merge(counties_geo,
          best_models_map_dat %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# MAP 2025
p_2025 = ggplot() +
  geom_sf(data = county_boundaris_catalog_ehe,
            aes(fill = avg_counts_2025), color = NA,
            lwd = .1) + 
  scale_fill_viridis_c(option = "B", direction = -1, limits = c(0,70)) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE 2025 prediction in frequency") +
  theme_void() + 
  theme(legend.position = "bottom")

# MAP 2035
p_2035 = ggplot() +
  geom_sf(data = county_boundaris_catalog_ehe,
            aes(fill = avg_counts_2035), color = NA,
            lwd = .1) + 
  scale_fill_viridis_c(option = "B", direction = -1, limits = c(0,70)) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE 2035 prediction in frequency") +
  theme_void() + 
  theme(legend.position = "bottom")
```
## 2008-2022 MAP

```{r}
#avg_dat = dat_table %>% filter(year_numerical == 2022 & event_type == "Extreme Heat Event") %>%
#  group_by(GEOID, NAME, STATE_NAME) %>%
#  summarize(event_count = n()) 
#avg_dat = merge(avg_dat, area_dat, by = "GEOID")
#avg_dat$avg_count_2022 = avg_dat$event_count/avg_dat$total_area_100_sq_mile

# map
#avg_dat_map = avg_dat %>% 
#  mutate(avg_counts = case_when(
#    avg_count_2022 < 0.1 ~ 0,
#    avg_count_2022 > 15 ~ 15,
#    TRUE ~ avg_count_2022
#  ))

## EHE
avg_dat = dat_table %>%filter(event_type == "Extreme Heat Event") %>%
  group_by(GEOID, NAME, STATE_NAME) %>%
  summarize(event_count = n(),
            avg_count_per_year = event_count/15)

# Merge with geometry data
county_boundaris_catalog_ehe <- merge(counties_geo,
          avg_dat %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# MAP
p_obs = ggplot() +
  geom_sf(data = county_boundaris_catalog_ehe,
            aes(fill = avg_count_per_year), color = NA,
            lwd = .1) + 
  scale_fill_viridis_c(option = "B", direction = -1, limits = c(0,70)) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE average yearly frequency (2008-2022)") +
  theme_void() + 
  theme(legend.position = "bottom")
p_obs
```

```{r}
## ECE
avg_dat_ece = dat_table %>%filter(event_type == "Extreme Cold Event") %>%
  group_by(GEOID, NAME, STATE_NAME) %>%
  summarize(event_count = n(),
            avg_count_per_year = event_count/15)

# Merge with geometry data
county_boundaris_catalog_ece <- merge(counties_geo,
          avg_dat_ece %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# MAP
p_obs_ece = ggplot() +
  geom_sf(data = county_boundaris_catalog_ece,
            aes(fill = avg_count_per_year), color = NA,
            lwd = .1) + 
  scale_fill_viridis_c(option = "B", direction = -1, limits = c(0,70)) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "ECE average yearly frequency (2008-2022)") +
  theme_void() + 
  theme(legend.position = "bottom")
p_obs_ece
```

```{r}
hist(best_models_df$event_count_2025_per_area)
hist(best_models_df$event_count_2035_per_area)
```

```{r}
p_2022
png("~/Desktop/freq_all.png",
    height = 5, width = 7, res = 300, units = "in")
print(p_2022)
dev.off()
```


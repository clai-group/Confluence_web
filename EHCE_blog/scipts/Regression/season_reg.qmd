---
title: "EHE Season Trend Analysis"
author: "Jingya Cheng"
date: "2024-01-09"
categories: [code, analysis, trend]
---

# Season Analysis for Extreme Heat Events

```{r, include=FALSE}
library(readr)
library(viridis)
library(tidyverse)
library(sf)
library(gridExtra)
library(RColorBrewer)
library(pscl)
library(reshape2)
library(data.table)
library(broom)
options(scipen=999)
```

### Loading the base spatail data set including Counties and States boundaires

```{r}
source_dir <- "./data/"
states_file_path <- file.path(source_dir,
                              "us49_states_geo_tigris.rds")
states_geo <- readRDS(states_file_path)[[1]]
counties_file_path <- file.path(source_dir,
                                "us49_counties_geo_tigris.rds")
counties_geo <- readRDS(counties_file_path)[[1]]
```

### Loading the aggregate extreme events data set

```{r}
dat_path <- file.path(source_dir,
                      "S190_T002_Counties_compiled_admin_geo_ehe_ece_sf_2008_2022.rds")
file_size <- file.info(dat_path)$size
dat <- readRDS(dat_path)[[1]]
```


### Data processing
Filter out Extreme Cold events from May to September each year. 
```{r}
dat_table = dat %>%  st_drop_geometry()
dat_table = dat_table %>% 
  filter(!(event_type == "Extreme Cold Event" & month_numerical %in% 5:9))
```

### Create seasonal summary by county

```{r}
dat_ehe_season = dat_table %>% filter(event_type == 'Extreme Heat Event') %>%
  dplyr::select(GEOID, NAME, STUSPS, STATE_NAME, 
         event_date, event_type, avg_intensity, year_numerical, 
         month_numerical, day_numerical) 
dat_ehe_season$event_date = as.Date(dat_ehe_season$event_date)

season_table <- dat_ehe_season %>%
  group_by(GEOID, NAME, STATE_NAME, year_numerical) %>%
  summarise(
    mean_intensity = mean(avg_intensity),
    first_event = min(day_numerical),
    last_event = max(day_numerical),
    duration = as.numeric(difftime(max(event_date), min(event_date), units = "days")) + 1
  )

season_table = season_table %>% complete(
  year_numerical = 2008:2022,
  fill =  list(mean_intensity = 0,
               first_event = 0,
               last_event = 0,
               duration = 0)
  )
```

### Duration Analysis

```{r}
options(scipen=999)
duration_analysis <- season_table %>%
  group_by(GEOID, NAME) %>%
  do(tidy(lm(duration ~ year_numerical, data = .)))
duration_analysis = duration_analysis %>% filter(term != '(Intercept)')

```

```{r}
hist(duration_analysis$p.value)
```

#### Map

```{r}
# Merge with geometry data
county_boundaris_catalog_all <- merge(counties_geo,
          duration_analysis %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# map
p_duration = ggplot() +
  geom_sf(data = county_boundaris_catalog_all,
            aes(fill = estimate), color = NA,
            lwd = .1) + 
  scale_fill_distiller(palette = "PuOr", 
                       limits = c(-8, 8)
                       ) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE Duration") +
  theme_void() + 
  theme(legend.position = "bottom")
p_duration

```

### First Event Analysis

```{r}
options(scipen=999)
first_event_analysis <- season_table %>%
  group_by(GEOID, NAME) %>%
  do(tidy(lm(first_event ~ year_numerical, data = .)))
first_event_analysis = first_event_analysis %>% filter(term != '(Intercept)')

```

```{r}
hist(first_event_analysis$p.value)
```

#### Map

```{r}
# Merge with geometry data
county_boundaris_catalog_all <- merge(counties_geo,
          first_event_analysis %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# area all map
p_first_event = ggplot() +
  geom_sf(data = county_boundaris_catalog_all,
            aes(fill = estimate), color = NA,
            lwd = .1) + 
  scale_fill_distiller(palette = "PuOr", 
                       limits = c(-15, 15)
                       ) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE First Event Date") +
  theme_void() + 
  theme(legend.position = "bottom")
p_first_event
#png("~/Desktop/ehe_ece_data_integration/post/output/season_first_event.png",
#    height = 5, width = 7, res = 300, units = "in")
#print(p_first_event)
#dev.off()
```

### Last Event Date Analysis

```{r}
options(scipen=999)
last_event_analysis <- season_table %>%
  group_by(GEOID, NAME) %>%
  do(tidy(lm(last_event ~ year_numerical, data = .)))
last_event_analysis = last_event_analysis %>% filter(term != '(Intercept)')
```

```{r}
hist(last_event_analysis$p.value)
```

#### Map

```{r}
# Merge with geometry data
county_boundaris_catalog_all <- merge(counties_geo,
          last_event_analysis %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 
# area all map
p_last_event = ggplot() +
  geom_sf(data = county_boundaris_catalog_all,
            aes(fill = estimate), color = NA,
            lwd = .1) + 
  scale_fill_distiller(palette = "PuOr", 
                       limits = c(-16, 16)
                       ) +
  geom_sf(data = states_geo, fill = NA, color = "grey", size = 0.01, alpha = 0.2) +
  labs(fill = "EHE Last Event Date") +
  theme_void() + 
  theme(legend.position = "bottom")
p_last_event
#png("~/Desktop/ehe_ece_data_integration/post/output/season_last_event.png",
#    height = 5, width = 7, res = 300, units = "in")
#print(p_last_event)
#dev.off()


#ggplot(result, aes(x = year_numerical, y = total_days, group = GEOID, color = GEOID)) +
#  geom_line() +
#  geom_point() +
#  theme_minimal() +
#  labs(title = "Total Days Trend by County",
#       x = "Year",
#       y = "Total Days",
#       color = "County (GEOID)")
```

### 

```{r, include=FALSE}
#season_table %>% select(year_numerical, STATE_NAME, duration) %>%
#  summarise(county_mean_intensity = mean(mean_intensity))
```

### Aggregation map

```{r}
duration_analysis$estimate[abs(duration_analysis$estimate) < 1] <- 0
first_event_analysis$estimate[abs(first_event_analysis$estimate) < 1] <- 0
last_event_analysis$estimate[abs(last_event_analysis$estimate) < 1] <- 0

season_map_dat = data.frame(GEOID = duration_analysis$GEOID, 
                            NAME = duration_analysis$NAME,
                            duration_estimate = duration_analysis$estimate,
                            first_event_estimate = first_event_analysis$estimate,
                            last_event_estimate = last_event_analysis$estimate)

get_sign <- function(x) {
  if (x > 0) {
    return("positive")
  } else if (x < 0) {
    return("negative")
  } else {
    return("0")
  }
}

season_map_dat$labels <- paste(sapply(season_map_dat$duration_estimate, 
                                        get_sign), 
                                 sapply(season_map_dat$first_event_estimate, 
                                        get_sign), 
                                 sapply(season_map_dat$last_event_estimate, 
                                        get_sign), 
                                 sep="-")

season_map_dat = season_map_dat %>% 
  mutate(label_group = case_when(
    labels == "negative-0-0" ~ "0-0-0",
    labels == "positive-0-0" ~ "0-0-0",
    labels == "0-0-negative" ~ "0-0-0",
    labels == "0-0-positive" ~ "0-0-0",
    labels == "0-negative-0" ~ "0-0-0",
    labels == "0-positive-0" ~ "0-0-0",
    labels == "positive-positive-positive" ~ "positive-0-positive",
    labels == "negative-negative-negative" ~ "negative-0-negative",
    labels == "positive-negative-negative" ~ "positive-negative-0",
    labels == "negative-positive-positive" ~ "negative-positive-0",
    TRUE ~ labels
  ))

county_boundaris_catalog_all <- merge(counties_geo,
          season_map_dat %>% st_drop_geometry(),
          by.x="GEOID",
          by.y="GEOID",
          all.x = TRUE,
          all.y = TRUE,
          suffix = c("","_sp")) %>% st_as_sf() 

palette <- rev(brewer.pal(9, "Paired"))
palette <- c(
  "0-0-0" = "lightblue",
  "0-negative-negative" = "deepskyblue3",
  "0-positive-positive" = "royalblue",
  "negative-positive-0" = "darkseagreen3",
  "negative-0-negative" = "olivedrab",
  "negative-positive-negative" = "chartreuse3",
  "positive-negative-0" = "lightpink2",
  "positive-negative-positive" = "brown3",
  "positive-0-positive" = "palevioletred2"
)
ggplot() +
  geom_sf(data = county_boundaris_catalog_all,
            aes(fill = label_group), color = NA,
            lwd = .1) + 
  scale_fill_manual(values = palette, na.translate = F) +
  geom_sf(data = states_geo, fill = NA, color = "black", size = 0.1) +
  labs(fill = "Season Analysis in Days(Duration-First events-Last events)") +
  theme_void() + 
  theme(legend.position = "bottom")
```

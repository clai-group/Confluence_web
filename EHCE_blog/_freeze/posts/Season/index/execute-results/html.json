{
  "hash": "113602009f198823298811c22d48a273",
  "result": {
    "markdown": "---\ntitle: \"EHE Season Trend Analysis\"\nauthor: \"Jingya Cheng\"\ndate: \"2024-01-09\"\ncategories: [code, analysis, trend]\n---\n\n\n# Season Analysis for Extreme Heat Events\n\n\n\n\n\n### Loading the base spatail data set including Counties and States boundaires\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource_dir <- \"./data/\"\nstates_file_path <- file.path(source_dir,\n                              \"us49_states_geo_tigris.rds\")\nstates_geo <- readRDS(states_file_path)[[1]]\ncounties_file_path <- file.path(source_dir,\n                                \"us49_counties_geo_tigris.rds\")\ncounties_geo <- readRDS(counties_file_path)[[1]]\n```\n:::\n\n\n### Loading the aggregate extreme events data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_path <- file.path(source_dir,\n                      \"Counties_compiled_admin_geo_ehe_ece_sf_2008_2022.rds\")\nfile_size <- file.info(dat_path)$size\ndat <- readRDS(dat_path)[[1]]\n```\n:::\n\n\n### Create seasonal summary by county \n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen=999)\ndat_table = dat %>%  st_drop_geometry()\ndat_ehe_season = dat_table %>% filter(event_type == 'Extreme Heat Event') %>%\n  select(GEOID, NAME, STUSPS, STATE_NAME, event_date, event_type, avg_intensity, year_numerical, \n         month_numerical, day_numerical)\ndat_ehe_season$event_date = as.Date(dat_ehe_season$event_date)\n## Adding years with no event to the dataset \nlookup_table <- dat_table %>%\n  select(GEOID, NAME, STUSPS, STATE_NAME) %>%\n  distinct() %>%\n  filter(!is.na(NAME) & !is.na(STUSPS) & !is.na(STATE_NAME))\n\nfill_na_with_lookup <- function(dat_table, lookup_table, column) {\n  na_rows <- is.na(dat_table[[column]])\n  lookup_values <- lookup_table[match(dat_table$GEOID[na_rows], lookup_table$GEOID), column]\n  dat_table[[column]][na_rows] <- lookup_values\n  return(dat_table)\n}\nyear_range <- data.frame(year_numerical = 2008:2022)\nunique_geoids <- unique(dat$GEOID)\nyear_geoid_combinations <- expand.grid(year_numerical = year_range$year_numerical, GEOID = unique_geoids)\n\nseason_table <- dat_ehe_season %>%\n  group_by(GEOID, NAME, STATE_NAME, year_numerical) %>%\n  summarise(\n    mean_intensity = mean(avg_intensity),\n    first_event = min(day_numerical),\n    last_event = max(day_numerical),\n    duration = as.numeric(difftime(max(event_date), min(event_date), units = \"days\")) + 1\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'GEOID', 'NAME', 'STATE_NAME'. You can\noverride using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nseason_table <- merge(year_geoid_combinations, \n                      season_table, \n                      by = c(\"year_numerical\", \"GEOID\"), all = TRUE)\nseason_table[\"mean_intensity\"] <- lapply(season_table[\"mean_intensity\"], function(x) ifelse(is.na(x), 0, x))\nseason_table[\"first_event\"] <- lapply(season_table[\"first_event\"], function(x) ifelse(is.na(x), 0, x))\nseason_table[\"last_event\"] <- lapply(season_table[\"last_event\"], function(x) ifelse(is.na(x), 0, x))\nseason_table[\"duration\"] <- lapply(season_table[\"duration\"], function(x) ifelse(is.na(x), 0, x))\nseason_table <- fill_na_with_lookup(season_table, \n                                    lookup_table, \"NAME\")\nseason_table <- fill_na_with_lookup(season_table,\n                                    lookup_table, \"STATE_NAME\")\n```\n:::\n\n\n### Duration Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen=999)\nduration_analysis <- season_table %>%\n  group_by(GEOID, NAME) %>%\n  do(tidy(lm(duration ~ year_numerical, data = .)))\nduration_analysis = duration_analysis %>% filter(term != '(Intercept)')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(duration_analysis$p.value)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n#### Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge with geometry data\ncounty_boundaris_catalog_all <- merge(counties_geo,\n          duration_analysis %>% st_drop_geometry(),\n          by.x=\"GEOID\",\n          by.y=\"GEOID\",\n          all.x = TRUE,\n          all.y = TRUE,\n          suffix = c(\"\",\"_sp\")) %>% st_as_sf() \n# area all map\nggplot() +\n  geom_sf(data = county_boundaris_catalog_all,\n            aes(fill = estimate), color = NA,\n            lwd = .1) + \n  scale_fill_distiller(palette = \"RdBu\", \n                       limits = c(-9, 9)\n                       ) +\n  geom_sf(data = states_geo, fill = NA, color = \"grey\", size = 0.01, alpha = 0.2) +\n  labs(fill = \"EHE Duration\") +\n  theme_void() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### First Event Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen=999)\nfirst_event_analysis <- season_table %>%\n  group_by(GEOID, NAME) %>%\n  do(tidy(lm(first_event ~ year_numerical, data = .)))\nfirst_event_analysis = first_event_analysis %>% filter(term != '(Intercept)')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(first_event_analysis$p.value)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge with geometry data\ncounty_boundaris_catalog_all <- merge(counties_geo,\n          first_event_analysis %>% st_drop_geometry(),\n          by.x=\"GEOID\",\n          by.y=\"GEOID\",\n          all.x = TRUE,\n          all.y = TRUE,\n          suffix = c(\"\",\"_sp\")) %>% st_as_sf() \n# area all map\nggplot() +\n  geom_sf(data = county_boundaris_catalog_all,\n            aes(fill = estimate), color = NA,\n            lwd = .1) + \n  scale_fill_distiller(palette = \"RdBu\", \n                       limits = c(-17.2, 17.2)\n                       ) +\n  geom_sf(data = states_geo, fill = NA, color = \"grey\", size = 0.01, alpha = 0.2) +\n  labs(fill = \"EHE First Event Date\") +\n  theme_void() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Last Event Date Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen=999)\nlast_event_analysis <- season_table %>%\n  group_by(GEOID, NAME) %>%\n  do(tidy(lm(last_event ~ year_numerical, data = .)))\nlast_event_analysis = last_event_analysis %>% filter(term != '(Intercept)')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(last_event_analysis$p.value)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n#### Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge with geometry data\ncounty_boundaris_catalog_all <- merge(counties_geo,\n          last_event_analysis %>% st_drop_geometry(),\n          by.x=\"GEOID\",\n          by.y=\"GEOID\",\n          all.x = TRUE,\n          all.y = TRUE,\n          suffix = c(\"\",\"_sp\")) %>% st_as_sf() \n# area all map\nggplot() +\n  geom_sf(data = county_boundaris_catalog_all,\n            aes(fill = estimate), color = NA,\n            lwd = .1) + \n  scale_fill_distiller(palette = \"RdBu\", \n                       limits = c(-25, 25)\n                       ) +\n  geom_sf(data = states_geo, fill = NA, color = \"grey\", size = 0.01, alpha = 0.2) +\n  labs(fill = \"EHE Last Event Date\") +\n  theme_void() + \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggplot(result, aes(x = year_numerical, y = total_days, group = GEOID, color = GEOID)) +\n#  geom_line() +\n#  geom_point() +\n#  theme_minimal() +\n#  labs(title = \"Total Days Trend by County\",\n#       x = \"Year\",\n#       y = \"Total Days\",\n#       color = \"County (GEOID)\")\n```\n:::\n\n\n### \n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}